enable_language(CUDA)

include_directories(${PSRDada_SOURCE_DIR}/src)
include_directories(${xGPU_SOURCE_DIR}/src)

set(PSRDada_LIB ${PSRDada_BINARY_DIR}/src/libpsrdada.so)
set(XGPU_LIB ${xGPU_BINARY_DIR}/src/libxgpu.a)

# DSA Fast Time Domain functions
#-------------------------------
add_executable(test_write test_write.c)
target_link_libraries(test_write ${PSRDada_LIB})

add_executable(test_read test_read.c)
target_link_libraries(test_read ${PSRDada_LIB})

add_executable(dsaX_trigger dsaX_trigger.c)
target_link_libraries(dsaX_trigger ${PSRDada_LIB})

add_executable(dsaX_filTrigger dsaX_filTrigger.c)
target_link_libraries(dsaX_filTrigger ${PSRDada_LIB})

# DMH: Has a 'sigproc' dependency, low priority
if(0)
  add_executable(splice_offline_beams splice_offline_beams.c)
  target_link_libraries(splice_offline_beams ${PSRDada_LIB})

  add_executable(dsaX_writeFil dsaX_writeFil.c)
  target_link_libraries(dsaX_writeFil ${PSRDada_LIB})
  
  add_executable(dsaX_splice dsaX_splice.c)
  target_link_libraries(dsaX_splice ${PSRDada_LIB})

  add_executable(gpu_flagger gpu_flagger.cu)
  target_link_libraries(gpu_flagger ${PSRDada_LIB})
endif()

add_executable(dsaX_store dsaX_store.c)
target_link_libraries(dsaX_store ${PSRDada_LIB})

add_executable(dsaX_fluff dsaX_fluff.c)
target_link_libraries(dsaX_fluff ${PSRDada_LIB})

# DMH: intrinsics compilation error
#add_executable(dsaX_reorder dsaX_reorder.c)
#target_link_libraries(dsaX_reorder ${PSRDada_LIB})

# DMH: /scratch/CPviolator/work/DSA110/dsa110-xengine/src/dsaX_nicdb.c: In function ‘process’:
#/scratch/CPviolator/work/DSA110/dsa110-xengine/src/dsaX_nicdb.c:145:65: warning: integer overflow in expression of type ‘int’ results in ‘-1073741824’ [-Woverflow]
#  145 |   uint64_t shifty = (bdepth-1)*NSAMPS_PER_BLOCK*NBEAMS_PER_BLOCK*NCHAN_FIL;
add_executable(dsaX_nicdb dsaX_nicdb.c)
target_link_libraries(dsaX_nicdb ${PSRDada_LIB})

add_executable(dsaX_dbnic dsaX_dbnic.c)
target_link_libraries(dsaX_dbnic ${PSRDada_LIB})

add_executable(dsaX_capture dsaX_capture.c)
target_link_libraries(dsaX_capture ${PSRDada_LIB})

add_executable(dsaX_capture_thread dsaX_capture_thread.c)
target_link_libraries(dsaX_capture_thread ${PSRDada_LIB})

add_executable(dsaX_capture_manythread dsaX_capture_manythread.c)
target_link_libraries(dsaX_capture_manythread ${PSRDada_LIB})

add_executable(dsaX_split dsaX_split.c)
target_link_libraries(dsaX_split ${PSRDada_LIB} -lm)

add_executable(dsaX_merge dsaX_merge.c)
target_link_libraries(dsaX_merge ${PSRDada_LIB})

add_executable(dsaX_simplesplit dsaX_simplesplit.c)
target_link_libraries(dsaX_simplesplit ${PSRDada_LIB})

add_executable(dsaX_fake dsaX_fake.c)
target_link_libraries(dsaX_fake ${PSRDada_LIB})

add_executable(dsaX_splitup dsaX_splitup.c)
target_link_libraries(dsaX_splitup ${PSRDada_LIB})

add_executable(dsaX_copydb dsaX_copydb.c)
target_link_libraries(dsaX_copydb ${PSRDada_LIB})

# DMH: fitsio dependency
if(0)
  add_executable(dsaX_writevis dsaX_writevis.c)
  target_link_libraries(dsaX_writevis ${PSRDada_LIB})
endif()

# DMH: XGPU dependencies
add_executable(dsaX_wrangle dsaX_wrangle.c)
target_link_libraries(dsaX_wrangle ${PSRDada_LIB} ${CUDA_nvml_LIBRARY} ${XGPU_LIB})

add_executable(dsaX_testdada dsaX_testdada.c)
target_link_libraries(dsaX_testdada ${PSRDada_LIB})

add_executable(dsaX_xgpu dsaX_xgpu.cu)
target_link_libraries(dsaX_xgpu ${PSRDada_LIB} ${XGPU_LIB} ${CUDA_nvml_LIBRARY})

add_executable(dsaX_cuda_correlator dsaX_cuda_correlator.cu)
target_link_libraries(dsaX_cuda_correlator ${XGPU_LIB} ${CUDA_nvml_LIBRARY} ${CUDA_cublas_LIBRARY} ${PSRDada_LIB})

add_executable(dsaX_reorder_raw dsaX_reorder_raw.c)
target_link_libraries(dsaX_reorder_raw ${PSRDada_LIB})

add_executable(fil2dada fil2dada.c)
target_link_libraries(fil2dada ${PSRDada_LIB})

add_executable(dumpfil dumpfil.c)
target_link_libraries(dumpfil ${PSRDada_LIB})

add_executable(dsaX_beamformer dsaX_beamformer.cu)
target_link_libraries(dsaX_beamformer ${PSRDada_LIB})

add_executable(dsaX_beamformer_passon dsaX_beamformer_passon.cu)
target_link_libraries(dsaX_beamformer_passon ${PSRDada_LIB})

add_executable(dsaX_beamformer_offline dsaX_beamformer_offline.cu)
target_link_libraries(dsaX_beamformer_offline ${PSRDada_LIB})
#------------------------------------------------------
